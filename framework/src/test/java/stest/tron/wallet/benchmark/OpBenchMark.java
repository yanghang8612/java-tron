package stest.tron.wallet.benchmark;

import lombok.extern.slf4j.Slf4j;
import org.junit.*;
import org.tron.common.parameter.CommonParameter;
import org.tron.common.runtime.InternalTransaction;
import org.tron.core.config.args.Args;
import org.tron.core.vm.OpCode;
import org.tron.core.vm.VM;
import org.tron.core.vm.program.Program;
import org.tron.core.vm.program.invoke.ProgramInvokeMockImpl;
import org.tron.protos.Protocol.Transaction;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.LinkedHashMap;
import java.util.Map;


@Slf4j
public class OpBenchMark {

    private ProgramInvokeMockImpl invoke;
    private Program program;

    @BeforeClass
    public static void init() {
        CommonParameter.getInstance().setDebug(true);
        CommonParameter.getInstance().setValidContractProtoThreadNum(4);
    }

    @AfterClass
    public static void destroy() {
        Args.clearParam();
    }

    @Test
    public void test() throws Exception {

        LinkedHashMap<Byte, byte[]> opMap = new LinkedHashMap<>();
        //stop
        opMap.put((byte)0x00, new byte[]{0x5b, 0x00, 0x60, 0x00, 0x56});
        //add
        opMap.put((byte)0x01, new byte[]{0x60, 0x01, 0x5b, 0x60, 0x01, 0x01, 0x60, 0x02, 0x56});
        //mul
        opMap.put((byte)0x02, new byte[]{0x60, 0x01, 0x5b, 0x60, 0x01, 0x02, 0x60, 0x02, 0x56});
        //sub
        opMap.put((byte)0x03, new byte[]{0x60, 0x01, 0x5b, 0x60, 0x01, 0x03, 0x60, 0x02, 0x56});
        //div
        opMap.put((byte)0x04, new byte[]{0x60, 0x01, 0x5b, 0x60, 0x01, 0x04, 0x60, 0x02, 0x56});
        //sdiv
        opMap.put((byte)0x05, new byte[]{0x60, 0x01, 0x5b, 0x60, 0x01, 0x05, 0x60, 0x02, 0x56});
        //mod
        opMap.put((byte)0x06, new byte[]{0x60, 0x01, 0x5b, 0x60, 0x01, 0x06, 0x60, 0x02, 0x56});
        //smod
        opMap.put((byte)0x07, new byte[]{0x60, 0x01, 0x5b, 0x60, 0x01, 0x07, 0x60, 0x02, 0x56});
        //addmod
        opMap.put((byte)0x08, new byte[]{0x60, 0x01, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x08, 0x60, 0x02, 0x56});
        //mulmod
        opMap.put((byte)0x09, new byte[]{0x60, 0x01, 0x5b, 0x60, 0x01, 0x60, 0x01, 0x09, 0x60, 0x02, 0x56});
        //exp
        opMap.put((byte)0x0a, new byte[]{0x60, 0x03, 0x5b, 0x60, 0x0b, 0x0a, 0x60, 0x02, 0x56});
        //SIGNEXTEND
        opMap.put((byte)0x0b, new byte[]{0x60, 0x01, 0x5b, 0x60, 0x01, 0x0b, 0x60, 0x02, 0x56});
        //lt
        opMap.put((byte)0X10, new byte[]{0x5b, 0x60, 0x01, 0x60, 0x01, 0X10, 0x50, 0x60, 0x00, 0x56});
        //gt
        opMap.put((byte)0X11, new byte[]{0x5b, 0x60, 0x01, 0x60, 0x01, 0X11, 0x50, 0x60, 0x00, 0x56});
        //slt
        opMap.put((byte)0X12, new byte[]{0x5b, 0x60, 0x01, 0x60, 0x01, 0X12, 0x50, 0x60, 0x00, 0x56});
        //sgt
        opMap.put((byte)0X13, new byte[]{0x5b, 0x60, 0x01, 0x60, 0x01, 0X13, 0x50, 0x60, 0x00, 0x56});
        //eq
        opMap.put((byte)0X14, new byte[]{0x5b, 0x60, 0x01, 0x60, 0x01, 0X14, 0x50, 0x60, 0x00, 0x56});
        //isZero
        opMap.put((byte)0x15, new byte[]{0x60, 0x1f, 0x5b, 0x15, 0x60, 0x02, 0x56});
        //and
        opMap.put((byte)0x16, new byte[]{0x5b, 0x60, 0x01, 0x60, 0x01, 0x16, 0x50, 0x60, 0x00, 0x56});
        //or
        opMap.put((byte)0x17, new byte[]{0x5b, 0x60, 0x01, 0x60, 0x01, 0x17, 0x50, 0x60, 0x00, 0x56});
        //xor
        opMap.put((byte)0x18, new byte[]{0x5b, 0x60, 0x01, 0x60, 0x01, 0x18, 0x50, 0x60, 0x00, 0x56});
        //not
        opMap.put((byte)0x19, new byte[]{0x60, 0x01, 0x5b, 0x19, 0x60, 0x02, 0x56});
        //byte
        opMap.put((byte)0x1a, new byte[]{0x5b, 0x61, 0x1f, 0x00, 0x60, 0x01, 0x1a, 0x50, 0x60, 0x00, 0x56});
        //SHL(0x1b)
        opMap.put((byte)0x1b, new byte[]{0x5b, 0x61, 0x1f, 0x00, 0x60, 0x01, 0x1b, 0x50, 0x60, 0x00, 0x56});
        //SHR(0x1c)
        opMap.put((byte)0x1c, new byte[]{0x5b, 0x61, 0x1f, 0x00, 0x60, 0x01, 0x1c, 0x50, 0x60, 0x00, 0x56});
        //SAR(0x1d)
        opMap.put((byte)0x1d, new byte[]{0x5b, 0x61, 0x1f, 0x00, 0x60, 0x01, 0x1d, 0x50, 0x60, 0x00, 0x56});
        
                /*Cryptographic Operations*/
        //SHA3(0x20)
        opMap.put((byte)0x20, new byte[]{
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x5b, 0x60, 0x08, 0x60, 0x00, (byte)0x20, 0x50, 0x61, 0x04, (byte)0x80, 0x56});
        
                /*Environmental Information */
        //ADDRESS(0x30)
        //BALANCE(0x31)
        //ORIGIN(0x32)
        //CALLER(0x33)
        //CALLVALUE(0x34)
        //CALLDATALOAD(0x35)
        //CALLDATASIZE(0x36)
        //CALLDATACOPY(0x37)
        //CODESIZE(0x38)
        //CODECOPY(0x39)
        //RETURNDATASIZE(0x3d)
        //RETURNDATACOPY(0x3e)
        //GASPRICE(0x3a)
        //EXTCODESIZE(0x3b)
        //EXTCODECOPY(0x3c)
        //EXTCODEHASH(0x3f)
      
                /*Block Information */
        //BLOCKHASH(0x40)
        //COINBASE(0x41)
        //TIMESTAMP(0x42)
        //NUMBER(0x43)
        //DIFFICULTY(0x44)
        //GASLIMIT(0x45)
      
                /*Memory, Storage and Flow Operations */
        //POP(0x50)
        opMap.put((byte)0x50, new byte[]{0x5b, 0x60, 0x01, 0x50, 0x60, 0x00, 0x56});
        //MLOAD(0x51)
        opMap.put((byte)0x51, new byte[]{0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x7c, 0x52,
                0x5b, 0x60, 0x7c, 0x51, 0x50, 0x60, 0x24, 0x56});
        //MSTORE(0x52)
        opMap.put((byte)0x52, new byte[]{0x5b, 0x7f,
                0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f,
                0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f,
                0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f,
                0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01,
                0x60, 0x00, 0x52, 0x60, 0x00, 0x56});
        //MSTORE8(0x53)
        opMap.put((byte)0x53, new byte[]{0x5b, 0x60, 0x1f, 0x60, 0x00, 0x53, 0x60, 0x00, 0x56});
        //SLOAD(0x54)
        //SSTORE(0x55)
        //JUMP(0x56)
        opMap.put((byte)0x56, new byte[]{0x5b, 0x60, 0x00, 0x56});
        //JUMPI(0x57)
        opMap.put((byte)0x57, new byte[]{0x5b, 0x60, 0x01, 0x60, 0x00, 0x57});
        //PC(0x58)
        opMap.put((byte)0x58, new byte[]{0x5b, 0x58, 0x50, 0x60, 0x00, 0x56});
        //MSIZE(0x59)
        opMap.put((byte)0x59, new byte[]{0x5b, 0x59, 0x50, 0x60, 0x00, 0x56});
        //GAS(0x5a)
        opMap.put((byte)0x5a, new byte[]{0x5b, 0x5a, 0x50, 0x60, 0x00, 0x56});
        //JUMPDEST(0x5b)
        opMap.put((byte)0x5b, new byte[]{0x5b, 0x60, 0x00, 0x56});
        
                /*Push Operations */
        //PUSH1(0x60)0x5b,
        opMap.put((byte)0x60, new byte[]{0x5b, 0x60, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH2(0x61)0x5b,
        opMap.put((byte)0x61, new byte[]{0x5b, 0x61, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH3(0x62)0x5b,
        opMap.put((byte)0x62, new byte[]{0x5b, 0x62, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH4(0x63)0x5b,
        opMap.put((byte)0x63, new byte[]{0x5b, 0x63, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH5(0x64)0x5b,
        opMap.put((byte)0x64, new byte[]{0x5b, 0x64, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH6(0x65) 0x1f,0x5b,
        opMap.put((byte)0x65, new byte[]{0x5b, 0x65, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH7(0x66) 0x1f,0x5b,
        opMap.put((byte)0x66, new byte[]{0x5b, 0x66, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH8(0x67) 0x1f,0x5b,
        opMap.put((byte)0x67, new byte[]{0x5b, 0x67, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH9(0x68) 0x1f,0x5b,
        opMap.put((byte)0x68, new byte[]{0x5b, 0x68, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH10(0x69) 0x1f,0x5b,
        opMap.put((byte)0x69, new byte[]{0x5b, 0x69, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH11(0x6a) 0x1f,0x5b,
        opMap.put((byte)0x6a, new byte[]{0x5b, 0x6a, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH12(0x6b) 0x1f,0x5b,
        opMap.put((byte)0x6b, new byte[]{0x5b, 0x6b, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH13(0x6c) 0x1f,0x5b,
        opMap.put((byte)0x6c, new byte[]{0x5b, 0x6c, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH14(0x6d) 0x1f,0x5b,
        opMap.put((byte)0x6d, new byte[]{0x5b, 0x6d, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH15(0x6e) 0x1f,0x5b,
        opMap.put((byte)0x6e, new byte[]{0x5b, 0x6e, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH16(0x6f) 0x1f,0x5b,
        opMap.put((byte)0x6f, new byte[]{0x5b, 0x6f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH17(0x70) 0x1f,0x5b,
        opMap.put((byte)0x70, new byte[]{0x5b, 0x70, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH18(0x71) 0x1f,0x5b,
        opMap.put((byte)0x71, new byte[]{0x5b, 0x71, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH19(0x72) 0x1f,0x5b,
        opMap.put((byte)0x72, new byte[]{0x5b, 0x72, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH20(0x73) 0x1f,0x5b,
        opMap.put((byte)0x73, new byte[]{0x5b, 0x73, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH21(0x74) 0x1f,0x5b,
        opMap.put((byte)0x74, new byte[]{0x5b, 0x74, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH22(0x75) 0x1f,0x5b,
        opMap.put((byte)0x75, new byte[]{0x5b, 0x75, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH23(0x76) 0x1f,0x5b,
        opMap.put((byte)0x76, new byte[]{0x5b, 0x76, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH24(0x77) 0x1f,0x5b,
        opMap.put((byte)0x77, new byte[]{0x5b, 0x77, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH25(0x78) 0x1f,0x5b,
        opMap.put((byte)0x78, new byte[]{0x5b, 0x78, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH26(0x79) 0x1f,0x5b,
        opMap.put((byte)0x79, new byte[]{0x5b, 0x79, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH27(0x7a) 0x1f,0x5b,
        opMap.put((byte)0x7a, new byte[]{0x5b, 0x7a, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH28(0x7b) 0x1f,0x5b,
        opMap.put((byte)0x7b, new byte[]{0x5b, 0x7b, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH29(0x7c) 0x1f,0x5b,
        opMap.put((byte)0x7c, new byte[]{0x5b, 0x7c, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH30(0x7d) 0x1f,0x5b,
        opMap.put((byte)0x7d, new byte[]{0x5b, 0x7d, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH31(0x7e) 0x1f,0x5b,
        opMap.put((byte)0x7e, new byte[]{0x5b, 0x7e, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        //PUSH32(0x7f) 0x1f,0x5b,
        opMap.put((byte)0x7f, new byte[]{0x5b, 0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x50, 0x60, 0x00, 0x56});
        
                /*Duplicate Nth item from the stack */
        //DUP1(0x80)
        //DUP2(0x81)
        //DUP3(0x82)
        //DUP4(0x83)
        //DUP5(0x84)
        //DUP6(0x85)
        //DUP7(0x86)
        //DUP8(0x87)
        //DUP9(0x88)
        //DUP10(0x89)
        //DUP11(0x8a)
        //DUP12(0x8b)
        //DUP13(0x8c)
        //DUP14(0x8d)
        //DUP15(0x8e)
        //DUP16(0x8f)
        opMap.put((byte)0x80, new byte[]{0x60, 0x01, 0x5b, (byte)0x80, 0x50, 0x60, 0x02, 0x56});
        opMap.put((byte)0x81, new byte[]{0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x81, 0x50, 0x60, 0x04, 0x56});
        opMap.put((byte)0x82, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x82, 0x50, 0x60, 0x06, 0x56});
        opMap.put((byte)0x83, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x83, 0x50, 0x60, 0x08, 0x56});
        opMap.put((byte)0x84, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x84, 0x50, 0x60, 0x0a, 0x56});
        opMap.put((byte)0x85, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x85, 0x50, 0x60, 0x0c, 0x56});
        opMap.put((byte)0x86, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x86, 0x50, 0x60, 0x0e, 0x56});
        opMap.put((byte)0x87, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x87, 0x50, 0x60, 0x10, 0x56});
        opMap.put((byte)0x88, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x88, 0x50, 0x60, 0x12, 0x56});
        opMap.put((byte)0x89, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x89, 0x50, 0x60, 0x14, 0x56});
        opMap.put((byte)0x8a, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x8a, 0x50, 0x60, 0x16, 0x56});
        opMap.put((byte)0x8b, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x8b, 0x50, 0x60, 0x18, 0x56});
        opMap.put((byte)0x8c, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x8c, 0x50, 0x60, 0x1a, 0x56});
        opMap.put((byte)0x8d, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x8d, 0x50, 0x60, 0x1c, 0x56});
        opMap.put((byte)0x8e, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x8e, 0x50, 0x60, 0x1e, 0x56});
        opMap.put((byte)0x8f, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x8f, 0x50, 0x60, 0x20, 0x56});

        /*Swap the Nth item from the stack with the top */
        //SWAP1(0x90)
        //SWAP2(0x91)
        //SWAP3(0x92)
        //SWAP4(0x93)
        //SWAP5(0x94)
        //SWAP6(0x95)
        //SWAP7(0x96)
        //SWAP8(0x97)
        //SWAP9(0x98)
        //SWAP10(0x99)
        //SWAP11(0x9a)
        //SWAP12(0x9b)
        //SWAP13(0x9c)
        //SWAP14(0x9d)
        //SWAP15(0x9e)
        //SWAP16(0x9f)
        opMap.put((byte)0x90, new byte[]{0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x90, 0x60, 0x04, 0x56});
        opMap.put((byte)0x91, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x91, 0x60, 0x06, 0x56});
        opMap.put((byte)0x92, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x92, 0x60, 0x08, 0x56});
        opMap.put((byte)0x93, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x93, 0x60, 0x0a, 0x56});
        opMap.put((byte)0x94, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x94, 0x60, 0x0c, 0x56});
        opMap.put((byte)0x95, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x95, 0x60, 0x0e, 0x56});
        opMap.put((byte)0x96, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x96, 0x60, 0x10, 0x56});
        opMap.put((byte)0x97, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x97, 0x60, 0x12, 0x56});
        opMap.put((byte)0x98, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x98, 0x60, 0x14, 0x56});
        opMap.put((byte)0x99, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x99, 0x60, 0x16, 0x56});
        opMap.put((byte)0x9a, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x9a, 0x60, 0x18, 0x56});
        opMap.put((byte)0x9b, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x9b, 0x60, 0x1a, 0x56});
        opMap.put((byte)0x9c, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x9c, 0x60, 0x1c, 0x56});
        opMap.put((byte)0x9d, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x9d, 0x60, 0x1e, 0x56});
        opMap.put((byte)0x9e, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x9e, 0x60, 0x20, 0x56});
        opMap.put((byte)0x9f, new byte[]{0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x5b, (byte)0x9f, 0x60, 0x22, 0x56});
        //LOG0(0xa0)
        opMap.put((byte)0xa0, new byte[]{0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x5b, 0x60, 0x01, 0x60, 0x00, (byte)0xa0, 0x60, 0x24, 0x56});
        //LOG1(0xa1)
        opMap.put((byte)0xa1, new byte[]{0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x5b, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31,
                0x60, 0x01, 0x60, 0x00, (byte)0xa1, 0x60, 0x24, 0x56});
        //LOG2(0xa2)
        opMap.put((byte)0xa2, new byte[]{0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x5b, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x32,
                0x60, 0x01, 0x60, 0x00, (byte)0xa2, 0x60, 0x24, 0x56});
        //LOG3(0xa3)
        opMap.put((byte)0xa3, new byte[]{0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x5b, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x32, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x33,
                0x60, 0x01, 0x60, 0x00, (byte)0xa3, 0x60, 0x24, 0x56});
        //LOG4(0xa4)
        opMap.put((byte)0xa4, new byte[]{0x7f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x01, 0x60, 0x00, 0x52,
                0x5b, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x32, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x33, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x34,
                0x60, 0x01, 0x60, 0x00, (byte)0xa4, 0x60, 0x24, 0x56});
        
                /*System operations */
        //CALLTOKEN(0xd0)
        //TOKENBALANCE(0xd1)
        //CALLTOKENVALUE(0xd2)
        //CALLTOKENID(0xd3)
        //ISCONTRACT(0xd4)
        //CREATE(0xf0)
        //CALL(0xf1)
        //CALLCODE(0xf2)
        //RETURN(0xf3)
        //DELEGATECALL(0xf4)
        //CREATE2(0xf5)
        //STATICCALL(0xfa)
        //REVERT(0xfd)
        //SUICIDE(0xff)
      
      final long billion = 1000000000L;
      final long billion5 = 5000000000L;
      final long billion10 = 10000000000L;
      final long billion20 = 20000000000L;
      final long billion40 = 40000000000L;
      
      long sampleSize = 50000;
      long simulateTimes = 10;
  
      String msg;
      BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("OpBenchMark.csv", true)) ;
      for (Map.Entry<Byte, byte[]> entry : opMap.entrySet()) {
        byte targetOp = entry.getKey();
        System.out.println("-------->" + OpCode.code(targetOp));
        
        for(int i = 1; i <= simulateTimes; i++) {
          VM vm = new VM();
          invoke = new ProgramInvokeMockImpl();
          invoke.setEnergyLimit(500000000000L);
          Transaction trx = Transaction.getDefaultInstance();
          InternalTransaction interTrx = new InternalTransaction(trx, InternalTransaction.TrxType.TRX_UNKNOWN_TYPE);
          program = new Program(entry.getValue(), invoke, interTrx);
          
          long timeAll = 0;
          long stepCount = 0;
      
          while (stepCount < sampleSize) {
            byte currentOp = program.getCurrentOp();
            long startTime = System.nanoTime();
        
            vm.step(program);
        
            long endTime = System.nanoTime();
            if(currentOp == targetOp){
              long runTime = endTime - startTime;
              timeAll += runTime;
              stepCount++;
            }
          }
      
          double singleTime = ((double) timeAll) / stepCount;
          msg = String.format("%s(0x%02x),%d,%d,%d,%f",
              OpCode.code(targetOp), targetOp, i, timeAll, stepCount, singleTime);
          System.out.println(msg);
          bufferedWriter.write(msg + "\n");
          bufferedWriter.flush();
        }
      }
      bufferedWriter.close();
    }
}
